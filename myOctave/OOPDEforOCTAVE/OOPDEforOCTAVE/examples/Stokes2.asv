classdef Stokes2 < pde
    properties(Dependent = true, GetAccess = public, SetAccess = private)
        velocity_x
        velocity_y
        pressure
        lagrange_x
        lagrange_y
    end

    % getter methods
    methods
        function val = get.velocity_x(obj)
            val = obj.y(:,1:obj.grid.nPoints);
        end
        function val = get.velocity_y(obj)
            val = obj.y(:,1+obj.grid.nPoints:2*obj.grid.nPoints);
        end
        function val = get.pressure(obj)
            val = obj.y(:,1+2*obj.grid.nPoints:3*obj.grid.nPoints);
        end
    end

    methods(Access = public)
        function initialize(obj,nue,s,stab,f)
             bcwall = obj.grid.dirichletBC('0');
             bctop = obj.grid.dirichletBC('1');

             obj.grid.makeBoundaryMatrix(bcwall,bcwall,bctop,bcwall);
             [~,~,H,Rtop] = obj.fem.assemb(obj.grid);
             obj.grid.makeBoundaryMatrix(bcwall);
             [~,~,~,Rwall] = obj.fem.assemb(obj.grid);
             [K,M,~]= obj.fem.assema(obj.grid,nue,.1,0);
             N = sparse(obj.grid.nPoints,obj.grid.nPoints);
             Bx = - obj.fem.convection(obj.grid,[1;0]);
             By = - obj.fem.convection(obj.grid,[0;1]);             
                     
%            
            % Dirichlet per Lagrange-Ansatz (oder per NB)
            % Andere Stabilisierung? Sonst doch singulÃ¤res A.
            C = - stab*(K+M);

            N1 = sparse(obj.grid.nDirichletBoundaryPoints,...
                obj.grid.nPoints);
            N2 = sparse(obj.grid.nDirichletBoundaryPoints,...
                obj.grid.nDirichletBoundaryPoints);
            
            n = zeros(obj.grid.nPoints,1);
            
            obj.A = -[K  N  Bx' H'  N1'
                      N  K  By' N1' H'
                      Bx By C   N1' N1'
                      H  N1 N1  N2  N2
                      N1 H  N1  N2  N2];   

              
             

            obj.b = [n
                    n
                    n
                    Rtop
                    Rwall];                
                  



obj.initialized = true;
        end

        function plot(obj,varargin)
            clf 
            xa=min(obj.grid.x); xb=max(obj.grid.x);
            ya=min(obj.grid.y); yb=max(obj.grid.y);
            subplot(2,2,1)     
            quiver(obj.grid.x,obj.grid.y,obj.velocity_x(1,:),obj.velocity_y(1,:),3);
            axis([xa,xb,ya,yb]);
            subplot(2,2,2)     
            obj.grid.plot(obj.velocity_x(1,:),varargin{:});view(2)
            subplot(2,2,3)
            obj.grid.plot(obj.velocity_y(1,:),varargin{:});view(2)
            subplot(2,2,4)     
            obj.grid.plot(obj.pressure(1,:),varargin{:});view(2)
        end   
    end

    methods(Access = protected)
        function dy = df(obj,~,y)
            % dummy
        end         
    end  

end