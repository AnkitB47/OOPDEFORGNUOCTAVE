% Define the circular domain
fd_circle = @(p, varargin) sqrt(p(:, 1).^2 + p(:, 2).^2) - 1;

% Generate mesh using distmesh2d
geps = 1e-5;
bbox = [-1, -1; 1, 1];  % Bounding box
h0 = 0.1;  % Initial mesh size
pfix = [];  % Define pfix as an empty array
max_iterations = 500;

[p, e, t] = distmesh2d(fd_circle, @huniform, h0, bbox, pfix);

% Evaluate node positions and count nodes inside the domain
nodes_inside_domain = sum(fd_circle(p) <= 0);

% Calculate theoretical number of nodes
radius = 1;  % Radius of the circle
area_circle = pi * radius^2;
desired_resolution = 0.1;  % Desired mesh resolution
theoretical_nodes = round(area_circle / desired_resolution^2);  % Approximate number of nodes

figure;

% Plot the mesh generated by distmesh2d
subplot(1, 2, 1);
trimesh(t, p(:, 1), p(:, 2));
title('Mesh Generated by distmesh2d');
xlabel('x');
ylabel('y');

% Call do_distmesh2d_polyhedral and plot the mesh
[p_poly, t_poly, ~, ~] = do_distmesh2d_polyhedral(fd_circle, @huniform, h0, bbox, [], geps, max_iterations);

subplot(1, 2, 2);
trimesh(t_poly, p_poly(:,1), p_poly(:,2));
title('Mesh by do_distmesh2d_polyhedral');
xlabel('x');
ylabel('y');

% Evaluate node positions and count nodes inside the domain for do_distmesh2d_polyhedral
if isempty(p_poly)
    nodes_inside_domain_polyhedral = 0;
else
    nodes_inside_domain_polyhedral = sum(fd_circle(p_poly) <= 0);
end

% Compare actual vs. theoretical nodes
fprintf('Actual Nodes Inside Domain (distmesh2d): %d\n', nodes_inside_domain);
fprintf('Theoretical Nodes Inside Domain: %d\n', theoretical_nodes);
% Compare the number of nodes inside the domain between distmesh2d and do_distmesh2d_polyhedral
fprintf('Actual Nodes Inside Domain (do_distmesh2d_polyhedral): %d\n', nodes_inside_domain_polyhedral);
